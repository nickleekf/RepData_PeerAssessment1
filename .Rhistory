setwd("~/R/5. Reproducible Research/repdata-032/RepData_PeerAssessment1")
file <- unzip("activity.zip")
dfActivity <- read.csv(file, stringsAsFactors = FALSE)
dfActivity$date <- as.Date(dfActivity$date)
str(dfActivity)
dfActivity_rm<-dfActivity[which(!is.na(dfActivity$steps)),]
StepsPerDay<-tapply(dfActivity_rm$steps, dfActivity_rm$date, sum)
str(StepsPerDay)
head(StepsPerDay)
hist(StepsPerDay)
hist(StepsPerDay, main = "Histogram of Daily Steps Taken from Oct to Nov 2012",)
hist(StepsPerDay,
main = "Histogram of Daily Steps Taken from Oct to Nov 2012",
xlab='Total Steps Each Day',
ylab='Frequency',
ylim=c(0, 30))
)
hist(StepsPerDay,
main = "Histogram of Daily Steps Taken from Oct to Nov 2012",
xlab='Total Steps Each Day',
ylab='Frequency',
ylim=c(0, 30))
hist(StepsPerDay,
main = "Histogram of Daily Steps Taken from Oct to Nov 2012",
xlab='Total Steps Each Day',
ylab='Frequency',
ylim=c(0, 30))
Print("Mean:" + mean(stepsPerDay))
echoo("Mean:" + mean(stepsPerDay))
echo("Mean:" + mean(stepsPerDay))
print(mean(stepsPerDay))
print(mean(StepsPerDay))
print(Mean: mean(StepsPerDay))
print("Mean:" mean(StepsPerDay))
cat("Current working dir: ", mean(StepsPerDay))
stepsPerDay <- StepsPerDay
avgActvitiyPerDay<-tapply(dfActivity_rm$steps, dfActivity_rm$interval, mean)
str(avgActvitiyPerDay)
head(avgActvitiyPerDay)
plot(y = avgActvitiyPerDay, x = names(avgActvitiyPerDay), type = "l", xlab = "5-Minute-Interval",
main = "Daily Activity Pattern", ylab = "Average number of steps")
plot(y = avgActvitiyPerDay,
x = names(avgActvitiyPerDay),
type = "l",
xlab = "5-Minute-Interval",
main = "Daily Activity Pattern",
ylab = "Average number of steps")
avgActvitiyPerDay[avgActvitiyPerDay==max(avgActvitiyPerDay)]
max(avgActvitiyPerDay)
avgActvitiyPerDay[max(avgActvitiyPerDay)]
avgActvitiyPerDay[avgActvitiyPerDay==max(avgActvitiyPerDay)]
names(avgActvitiyPerDay)
sprintf("The 5-minute interval that has the maximum number of steps across all days is: %s", avgActvitiyPerDay[avgActvitiyPerDay==max(avgActvitiyPerDay)])
sprintf("The 5-minute interval that has the maximum number of steps across all days is: %s", avgActvitiyPerDay[avgActvitiyPerDay==max(avgActvitiyPerDay)]$interval)
sprintf("The 5-minute interval that has the maximum number of steps across all days is: %s", avgActvitiyPerDay[avgActvitiyPerDay==max(avgActvitiyPerDay)].name)
avgActvitiyPerDay
names(avgActvitiyPerDay)
names(avgActvitiyPerDay)(dailyact[dailyact==max(dailyact)])
names(avgActvitiyPerDay)[dailyact[dailyact==max(dailyact)]]
names(avgActvitiyPerDay)[avgActvitiyPerDay[avgActvitiyPerDay==max(avgActvitiyPerDay)]]
sum(is.na(dfActivity$steps))
sum(is.na(dfActivity))
head(dfActivity)
str(dfActivity)
sum(is.na(dfActivity))
sum(is.na(dfActivity$steps))
dfActivity_new <- dfActivity
dfActivity_new[which(is.na(dfActivity_new$steps)),1] <-
avgDailyActivity[as.character(dfActivity_new[which(is.na(dfActivity_new$steps)),3])]
sum(is.na(act_new))
avgDailyActivity<-tapply(dfActivity_rm$steps, dfActivity_rm$interval, mean)
plot(y = avgDailyActivity,
x = names(avgDailyActivity),
type = "l",
xlab = "5-Minute-Interval",
main = "Average Daily Activity Pattern",
ylab = "Average number of steps")
avgDailyActivity[avgDailyActivity==max(avgDailyActivity)]
sum(is.na(dfActivity))
sum(is.na(dfActivity$steps))
dfActivity_new <- dfActivity
dfActivity_new[which(is.na(dfActivity_new$steps)),1] <-
avgDailyActivity[as.character(dfActivity_new[which(is.na(dfActivity_new$steps)),3])]
sum(is.na(dfActivity_new))
str(dfActivity_new)
head(dfActivity_new)
avgDailyActivity_new<-tapply(dfActivity_new$steps, dfActivity_new$date, sum)
par(mfrow=c(1,2))
hist(avgDailyActivity, 10,
main = "Total number of steps taken per day",
xlab = "Steps",
ylim =c(0, 30))
abline(v = median(avgDailyActivity), col = 4, lwd = 4)
hist(avgDailyActivity_new, 10,
main = "Total number of steps taken per day (missing values replaced with mean of interval)",
xlab = "Steps",
ylim =c(0, 30))
abline(v = median(avgDailyActivity_new), col = 4, lwd = 4)
dayType <- function(dates) {
f <- function(date) {
if (weekdays(date) %in% c("Saturday", "Sunday")) {
"weekend"
}
else {
"weekday"
}
}
sapply(dates, f)
}
dfActivity_new$dayType <- as.factor(dayType(dfActivity_new$date))
str(dfActivity_new)
library(lattice)
steps.interval <- aggregate(steps ~ interval + dayType, dfActivity_new, mean)
xyplot(steps ~ interval | dayType, data=steps.interval, layout=c(1,2), type='l')
xyplot(steps ~ interval | dayType, data=steps.interval, layout=c(1,2), type='l', ylim = c(0,250))
xyplot(steps ~ interval | dayType, data=steps.interval, ylim = c(0,250), layout=c(1,2), type='l')
xyplot(steps ~ interval | dayType, data=steps.interval, ylim = c(0,350), layout=c(1,2), type='l')
xyplot(steps ~ interval | dayType, data=steps.interval, layout=c(1,2), type='l')
xyplot(steps ~ interval | dayType, data=steps.interval, ylim = c(0,300), layout=c(1,2), type='l')
xyplot(steps ~ interval | dayType, data=steps.interval, ylim = c(0,350), layout=c(1,2), type='l')
xyplot(steps ~ interval | dayType, data=steps.interval, ylim = c(0,300), layout=c(1,2), type='l')
q()
